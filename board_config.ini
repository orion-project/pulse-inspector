# Settings for serial communication and board
# protocol specification - commands, error codes, etc.

######################################################
[connection]

# Serial port to use
# Leave empty for auto-detection of the first available port
port =

# Connection timeout in seconds
timeout = 1

# Baud rate for serial communication
# Common values: 9600, 19200, 38400, 57600, 115200
baudrate = 115200

# Arduino boards reset when a serial connection is opened
# Delay after connection allows it to complete its bootloader and initialization sequence
reset_time = 3

######################################################
[operations]

# A distance to jog when pressing the "Jog" buttons (in µm)
jog_distance = 0.25

# A distance to jog when pressing the "Jog (long)"" buttons (in µm)
jog_distance_long = 1

######################################################
[commands]

# Default command timeout in seconds
# Not later than this time, the board should answer either with OK or an error code
# If there is no answer, the board is considered to be hung, and the command gets aborted
# The value can be overridden in each command separately
timeout = 5
# NB: After any error (including timeout),
#     correctness of soft-to-board communication
#     is not guaranteed, so it's better to reconnect the board!

# Serial answer prefix when command finishes normally (positive answer)
# Positive answer can contain an additional result value
# depending on the command, e.g. `OK 42` - current position after MOVE
answer_ok = OK

# Serial answer prefix when command fails (negative answer)
# Negative answer must provide an error code, e.g. `ERR 104`
answer_err = ERR

# Move the stage to a known reference position
# Returns new current position in µm, e.g. `OK 0`
# It not necessary must be zero; depends on the hadrware
[[HOME]]
serial_name = $H
timeout = 10

# Stop any movement or measurement
[[STOP]]
serial_name = $X

# Go to an absolute position; available only after homing
# Argument is a position to go to, in µm
# Returns new current position in µm, e.g. `OK 20.5`
# Example: `$G 10` - go to 10µm from zero
[[MOVE]]
serial_name = $G

# Go to a position relative to the current one
# Can be used even before homing (without knowing the current position)
# It could be unsafe but useful for debugging and tuning hardware
# Parameter is a distance to offset, in µm
# Returns new current position in µm if the board is homed, e.g. `OK 42`
# If the board is not homed, returns just OK
[[JOG]]
serial_name = $J

# Do a number of autocorrelation scans
# Arguments:
# - Optional number of scans; scan continuously if not provided
# Returns list of position and signal intensity, e.g. `OK 10.5 200`
# Returns no result when all points has been measured, e.g. `OK`
# Examples:
# - `$S 1` - do single scan
# - `$S` - do continuous scanning

# Do a single autocorrelation scan
# Returns list of position and signal intensity, e.g. `OK 10.5 200`
# Returns no result when all points has been measured, e.g. `OK`
[[SCAN]]
serial_name = $MS

# Continuously scan the autocorrelation signal back and forth
# Returns list of position and signal intensity, e.g. `OK 10.5 200`
# Returns no result when all points has been measured, e.g. `OK`
[[SCANS]]
serial_name = $MC

# Debug command for injecting errors into running commands
# for testing how UI parses and displays command failures
[[ERROR]]
serial_name = $DE

# Human-readable messages for error codes
# NB: After any error (including timeout),
#     correctness of soft-to-board communication
#     is not guaranteed, so it's better to reconnect the board!
[errors]
100 = Unknown error
101 = Unknown command
102 = Another command is already running
103 = Command is not applicable
104 = Position lost, homing required
105 = Invalid command parameter
