# Settings for serial communication and
# board protocol specification - commands, parameters, error codes, etc.

######################################################
[connection]

# Serial port to use.
# Leave blank to auto-detect the first available port.
port =

# Connection timeout in seconds.
timeout = 1

# Baud rate for serial communication.
# Common values: 9600, 19200, 38400, 57600, 115200.
baudrate = 115200

# Arduino boards reset when a serial connection is opened.
# Delay after connection allows it to complete its bootloader and initialization sequence.
reset_time = 3

# Connect automatically when the application starts (TBD).
auto_connect = False

# Home automatically when the application starts and connects (TBD).
auto_home = False

######################################################
[operations]

# Distance to move when pressing the "Jog Forth/Back" buttons (in µm).
jog_distance = 0.25

# Distance to move when pressing the "Jog Forth/Back (long)" buttons (in µm).
jog_distance_long = 1

######################################################
[commands]
# After their name, commands can include one or several arguments separated by the space character.
# A command should be finished by sending either positive or negative answer.
# Positive answer could be followed by some result value.
# Negative answer must be followed by an error code.

# Default command timeout in seconds.
# Within this time, the board should answer either with OK or an error code.
# If there is no answer, the board is considered to be hung, and the command gets aborted.
# The value can be overridden in each command separately.
timeout = 5
# NB: After any error (including timeout),
#     correctness of soft-to-board communication
#     is not guaranteed, so it's better to reconnect the board!

# Serial answer prefix when a command finishes normally (positive answer).
# Depending on the command, positive answer can contain
# an additional result value e.g. `OK 42` - current position after MOVE.
answer_ok = OK

# Serial answer prefix when a command fails (negative answer).
# Negative answer must provide an error code, e.g. `ERR 104`.
answer_err = ERR

# Move the stage to a known reference position.
# Returns new current position in µm, e.g. `OK 0`.
# It does not necessarily have to be zero; depends on the hardware.
# The software doesn't make any assumptions on what the home position is.
[[HOME]]
serial_name = $H
timeout = 10

# Stop any movement or measurement.
[[STOP]]
serial_name = $X

# Go to an absolute position.
# Available only after homing.
# Argument is a position to go to, in µm.
# Returns new current position in µm, e.g. `OK 20.5`.
# Example: `$G 10` - go to 10µm from zero.
[[MOVE]]
serial_name = $G

# Go to a position relative to the current one.
# Can be used even before homing (without knowing the current position)
# which could be unsafe but useful for debugging and tuning.
# Argument is an offset distance, in µm.
# Returns new current position in µm if the board is homed, e.g. `OK 42`.
# If the board is not homed, returns just OK.
[[JOG]]
serial_name = $J

# Do a single autocorrelation scan.
# Available only after homing.
# Recurrently returns the stage absolute position (in µm).
# and respective signal intensity (in arbitrary units), e.g. `OK 10.5 200`.
# Returns no result when all points have been measured, e.g. `OK`.
[[SCAN]]
serial_name = $MS

# By default, command answers are logged for debug purposes.
# But when scanning, it can produce a lot of messages that clutter logs.
log_answer = false

# Continuously scan the autocorrelation signal back and forth.
# Available only after homing.
# Recurrently returns the stage absolute position (in µm).
# and respective signal intensity (in arbitrary units), e.g. `OK 10.5 200`.
# Returns no result when all points have been measured, e.g. `OK`.
# and then continues scanning in the opposite direction.
[[SCANS]]
serial_name = $MC

# By default, command answers are logged for debug purposes.
# But when scanning, it can produce a lot of messages that clutter logs.
log_answer = false

# Set/get a firmware parameter (motor settings, ADC parameters, etc).
# Parameter implementation depends on the firmware,
# they can be stored in the EEPROM, or in the driver OTP memory.
# When called without arguments, the command returns all parameter values
# as a series of answers like `OK p1 42`, `OK p2 10.5`, followed by final `OK`.
# When called with a name and value, the commands stores the value in the firmware.
# e.g. `$P p1 32` - set parameter p1 to value 32, answer is `OK`.
[[PARAM]]
serial_name = $P

# Debug command for injecting errors into running commands.
# for testing how UI parses and displays command failures.
[[ERROR]]
serial_name = $DE

# Human-readable messages for error codes.
# NB: After any error (including timeout),
#     correctness of soft-to-board communication
#     is not guaranteed, so it's better to reconnect the board!
[errors]
100 = Unknown error
101 = Unknown command
102 = Another command is already running
103 = Command is not applicable
104 = Position lost, homing required
105 = Invalid command parameter

[parameters]
# Parameters which are stored on the board.
# Parameter implementation depends on the firmware,
# they can be stored in the EEPROM, or in the driver OTP memory.
#
# Parameters are always returned by the firmware in the text form,
# and the software makes no assumptions on their meaning.
# But parameter specification can include several properties
# helping the app to show a proper editor for the parameter.
# Without them, the parameter is edited as a simple unconstrained string.
#
# - title     - Human-readable name.
# - range     - A range of available values given as `min - max`
#               if at least min or max is given as a float (e.g. 1.1)
#               then a float editor will be used for the parameter.
# - precision - A number of decimal points in the editor (only for floats).
# - step      - An increment/decrement when changing value by arrow keys.
# - options   - A set of available values given as `1,2,3,4`.
#               When provided, a drop-down is used for editing such parameter.
#               If the set consists of only two values 0 and 1, it is rendered as a flag.
#
# Here are several arbitrary sample parameters; only for demo, actual parameters TBD.

[[1]]
title = Motor microstepping
options = 8, 16, 32, 64

[[2]]
title = Cutoff frequency
range = 10 - 100

[[3]]
title = Transimpedance amplifier gain
range = 0.1 - 1.1
